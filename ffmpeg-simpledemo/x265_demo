#include <stdio.h>  
#include <stdlib.h>  

#if defined ( __cplusplus)  
extern "C"
{
#include "x265.h"  
};
#else  
#include "x265.h"  
#endif  

int main(int argc, char** argv) {
	int i, j;
	FILE *fp_src = NULL;
	FILE *fp_dst = NULL;
	int y_size;
	int buff_size;
	char *buff = NULL;
	int ret;
	x265_nal *pNals = NULL;
	uint32_t iNal = 0;

	x265_param* pParam = NULL;
	x265_encoder* pHandle = NULL;
	x265_picture *pPic_in = NULL;
	x265_picture pPic_out;

	//Encode 50 frame  
	//if set 0, encode all frame  
	int frame_num = 250;
	int csp = X265_CSP_I420;
	int width = 1280, height = 720;

	fp_src = fopen("E:\\iqiyi\\ffmpeg\\ffmpeg-win64-shared\\ffmpeg-win64-shared\\bin\\1280_720.yuv", "rb");

	fp_dst = fopen("1280_720.h265", "wb");
	//Check  
	if (fp_src == NULL || fp_dst == NULL) {
		return -1;
	}

	pParam = x265_param_alloc();
	x265_param_default(pParam);
	pParam->levelIdc = 51; 
	pParam->bHighTier = 0; //main tier
	pParam->bRepeatHeaders = 1;//write sps,pps before keyframe  
	pParam->internalCsp = csp;
	pParam->sourceWidth = width;
	pParam->sourceHeight = height;
	pParam->fpsNum = 25;
	pParam->fpsDenom = 1;
	pParam->keyframeMax = 75;
	pParam->keyframeMin = 75; //一个gop75帧
	pParam->scenecutThreshold = 0; //值为0时，场景切换处插入P帧，否则插入I帧
	pParam->bOpenGOP = 0;  //封闭式gop
	pParam->bBPyramid = 1;  //b 帧允许被参考，否则只会参考I、P帧。参考B帧的效果会降低一半。
	pParam->bFrameBias = 50;  //设置生成B帧的参考阈值
	//pParam->rc.bitrate = 800 * 1024;
	//pParam->rc.rateControlMode = X265_RC_ABR;
	//Init  
	pHandle = x265_encoder_open(pParam);
	if (pHandle == NULL) {
		printf("x265_encoder_open err\n");
		return 0;
	}
	y_size = pParam->sourceWidth * pParam->sourceHeight;

	pPic_in = x265_picture_alloc();
	x265_picture_init(pParam, pPic_in);
	switch (csp) {
	case X265_CSP_I444: {
		buff = (char *)malloc(y_size * 3);
		pPic_in->planes[0] = buff;
		pPic_in->planes[1] = buff + y_size;
		pPic_in->planes[2] = buff + y_size * 2;
		pPic_in->stride[0] = width;
		pPic_in->stride[1] = width;
		pPic_in->stride[2] = width;
		break;
	}
	case X265_CSP_I420: {
		buff = (char *)malloc(y_size * 3 / 2);
		pPic_in->planes[0] = buff;
		pPic_in->planes[1] = buff + y_size;
		pPic_in->planes[2] = buff + y_size * 5 / 4;
		pPic_in->stride[0] = width;
		pPic_in->stride[1] = width / 2;
		pPic_in->stride[2] = width / 2;
		break;
	}
	default: {
		printf("Colorspace Not Support.\n");
		return -1;
	}
	}

	//detect frame number  
	if (frame_num == 0) {
		fseek(fp_src, 0, SEEK_END);
		switch (csp) {
		case X265_CSP_I444:frame_num = ftell(fp_src) / (y_size * 3); break;
		case X265_CSP_I420:frame_num = ftell(fp_src) / (y_size * 3 / 2); break;
		default:printf("Colorspace Not Support.\n"); return -1;
		}
		fseek(fp_src, 0, SEEK_SET);
	}

	//Loop to Encode  
	for (i = 0; i<frame_num; i++) {
		switch (csp) {
		case X265_CSP_I444: {
			fread(pPic_in->planes[0], 1, y_size, fp_src);       //Y  
			fread(pPic_in->planes[1], 1, y_size, fp_src);       //U  
			fread(pPic_in->planes[2], 1, y_size, fp_src);       //V  
			break; }
		case X265_CSP_I420: {
			fread(pPic_in->planes[0], 1, y_size, fp_src);       //Y  
			fread(pPic_in->planes[1], 1, y_size / 4, fp_src); //U  
			fread(pPic_in->planes[2], 1, y_size / 4, fp_src); //V  
			break; }
		default: {
			printf("Colorspace Not Support.\n");
			return -1; }
		}
		pPic_in->bitDepth = 8;
		pPic_in->pts = i;

		ret = x265_encoder_encode(pHandle, &pNals, &iNal, pPic_in, &pPic_out);
		if (ret < 0)
		{
			printf("x265 encoder may has error!");
		}
		printf("Succeed encode %5d frames\n", i);

		for (j = 0; j<iNal; j++) {
			fwrite(pNals[j].payload, 1, pNals[j].sizeBytes, fp_dst);
			printf("frame pts %d dts %d cts %d type %d \n", pPic_out.pts, pPic_out.dts, pPic_out.pts - pPic_out.dts, pPic_out.sliceType);
		}
	}
	//Flush Decoder  
	while (1) {
		ret = x265_encoder_encode(pHandle, &pNals, &iNal, NULL, NULL);
		if (ret == 0) {
			break;
		}
		printf("Flush 1 frame.\n");

		for (j = 0; j<iNal; j++) {
			fwrite(pNals[j].payload, 1, pNals[j].sizeBytes, fp_dst);
		}
	}

	x265_encoder_close(pHandle);
	x265_picture_free(pPic_in);
	x265_param_free(pParam);
	x265_cleanup();
	free(buff);
	fclose(fp_src);
	fclose(fp_dst);

	return 0;
}
